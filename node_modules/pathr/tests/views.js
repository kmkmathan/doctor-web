'use strict';

var pathr = require('../index.js'),
	pathr = new pathr,
	assert = require('chai').assert;

pathr.config('views', __dirname);
pathr.config('view_engine', require('jade').__express);

describe('pathr', function(){

	var req = {
		url: '/foo/bar',
		method: 'GET',
		body: {
			names:'Your mom'
		},
	};

	var req2 = {
		url: '/foo/baz?foo=bar',
		method: 'GET',
		body: {
			names:'Your mom'
		},
	};

	var req3 = {
		url: '/foo',
		method: 'GET',
		body: {
			names:'Your mom'
		},
	};


	var res = {
		write: function(){},
		writeHead: function(){},
	};

	var cb = function(req, res, done) {
		res.locals = req.body;
		done();
	};

	describe('pathr#get()', function(){
		it('registers a get', function(){
			pathr.get('/foo/bar', cb, {
				view: 'view'
			});
			assert.ok(1);
		});
	});

	describe('pathr#route()', function(){
		it('routes a path', function(d){
			res.end = function(data){
				assert.ok(data);
				d();
			};
			pathr.route(req, res);
		});
	});

	describe('pathr#get()', function(){
		it('registers a get', function(){
			pathr.get('/foo/baz?', cb, {
				view: 'view2'
			});
			assert.ok(1);
		});
	});

	describe('pathr#route()', function(){
		it('routes a path', function(d){
			res.end = function(data){
				assert.equal(data, '<h1>Your mom</h1>');
				d();
			};
			pathr.route(req2, res);
		});
	});

	describe('pathr#get()', function(){
		it('registers a get', function(){
			pathr.get('/foo', cb, { });
			assert.ok(1);
		});
	});

	describe('pathr#route()', function(){
		it('routes a path', function(d){
			res.end = function(data){
				assert.isString(data);
				assert.equal(data, JSON.stringify(req3.body));
				d();
			};
			pathr.route(req3, res);
		});
	});
});
