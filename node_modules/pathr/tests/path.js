'use strict';

var assert = require('chai').assert;

var pathr = require('../index.js'),
	pathr = new pathr,
	route = require('../lib/utils.js'),
	request = require('../lib/request.js'),
	Route = require('../lib/routes.js');

describe('route#pathtoRegexp()', function(){
	it('turns a string into a regex', function(){
		var keys = [];
		var r = route.pathtoRegexp('/users/:id', keys);
		assert.equal(typeof r, typeof /sdf/gi);
		assert.ok(keys);
		assert.equal(keys.length, 1);
	});
});

describe('request#parseQuery()', function(){
	it('parses a query', function(){
		var req = {
			url: '/status?name=ryan&age=22'
		}; 
		var query = request.parseQuery(req);
		assert.isObject(req.query);
		assert.equal(req.query.age, '22');
		assert.equal(req.query.name, 'ryan');
	});
});

describe('request#parseQuery()', function(){
	it('parses a query', function(){
		var req = {
			url: '/status'
		}; 
		var query = request.parseQuery(req);
		assert.isObject(req.query);
	});
});

describe('Route()', function(){
	var cb = function(req, res) { };
	var r = new Route('GET', '/foo/:id', cb, {});

	describe('new Route()', function(){
		it('creates a new route instance', function(){
			assert.isObject(r);
			assert.isString(r.path);
			assert.equal(typeof r.regexp, typeof /i|d/gi);
			assert.isArray(r.keys);
			assert.equal(r.keys.length, 1);
		});
	});

	describe('Route().match()', function(){
		it('matches a route and returns an object of the params', function(){
			var params = r.match('/foo/bar');
			assert.equal(params['id'], 'bar');
		});
	});
});

describe('Route()', function(){
	var cb = function(req, res) { };
	var r = new Route('GET', '/foo/:bas/:biz/:id?', cb, {});

	describe('new Route()', function(){
		it('creates a new route instance', function(){
			assert.isObject(r);
			assert.isString(r.path);
			assert.equal(typeof r.regexp, typeof /i|d/gi);
			assert.isArray(r.keys);
			assert.equal(r.keys.length, 3);
		});
	});

	describe('Route().match()', function(){
		it('matches a route and returns an object of the params', function(){
			var params = r.match('/foo/this_is_value1/this_is_value2/this_is_value3');
			assert.equal(params['bas'], 'this_is_value1');
			assert.equal(params['biz'], 'this_is_value2');
			assert.equal(params.id, 'this_is_value3');
		});
	});
});

describe('pathr routes', function(){
	describe('pathr#register()', function(){
		var cb = function(req, res, d) {d()};
		it('registers a new route', function(){
			pathr.register('GET', '/foo/:var', cb, {foo:'bar'});
			assert.isObject(pathr.routes.GET[0]);
		});
	});
	describe('pathr#post()', function(){
		var cb = function(req, res, d) {d()};
		it('registers a new route', function(){
			pathr.post('/foo/:var', cb, {});
			assert.isObject(pathr.routes.POST[0]);
		});
	});

	var req = {
		url: '/foo/sdf',
		method: 'POST'
	};

	var req2 = {
		url: '/foo/sdf',
		method: 'POST'
	};

	var res = {
		write: function() {},
		writeHead: function() {},
		end: function() {}
	};

	describe('pathr#route()', function(){
		it('routes a requrest to a callback', function(){
			var good = pathr.route(req, res);
			assert.ok(good);
		});
	});

	describe('pathr#route()', function(){
		it('routes a requrest to a callback', function(){
			var good = pathr.route(req2, res);
			assert.ok(good);
		});
	});
	
	describe('pathr#config(views)', function(){
		it('sets a base dir for views', function(){
			var good = pathr.config('views', __dirname+'/../views');
			assert.ok(!good);
		});
	});

	describe('pathr#config(view_engine)', function(){
		it('sets jade as view engine', function(){
			var good = pathr.config('view_engine', require('jade').__express);
			assert.ok(!good);
		});
	});

});
