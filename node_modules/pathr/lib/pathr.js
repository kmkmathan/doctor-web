'use strict';

var Route = require('./routes.js'),
	config = require('./config.js'),
	response = require('./response.js'),
	request = require('./request.js'),
	utils = require('./utils.js');

var Pathr = function() { 
	/**
	 *	Maintain object of routes and their callbacks
	 */
	this.routes = {
		'GET': [],
		'PUT': [],
		'POST': [],
		'DELETE': [],
	};

	/**
	 *	Configure the app
	 */
	this.config = function(key, val) {
		return config.call(this, key, val);
	};
};

/**
 *	Let the user supply routes, callbacks, and options objects
 *
 *	@param {String} method
 *	@param {String} path
 *	@param {Function} callback
 *	@param {Object} options
 */
Pathr.prototype.register = function(method, path, callback, options) {
	var r = new Route(method, path, callback, options);
	if (!r) throw new Error('Invalid route');
	this.routes[method].push(r);
};

/**
 *	Convienence
 */
Pathr.prototype.get = function(path, callback, options) {
	var r = new Route('GET', path, callback, options);
	if (!r) throw new Error('Invalid route');
	this.routes['GET'].push(r);
};

Pathr.prototype.put = function(path, callback, options) {
	var r = new Route('PUT', path, callback, options);
	if (!r) throw new Error('Invalid route');
	this.routes['PUT'].push(r);
};

Pathr.prototype.post = function(path, callback, options) {
	var r = new Route('POST', path, callback, options);
	if (!r) throw new Error('Invalid route');
	this.routes['POST'].push(r);
};

Pathr.prototype.delete = function(path, callback, options) {
	var r = new Route('DELETE', path, callback, options);
	if (!r) throw new Error('Invalid route');
	this.routes['DELETE'].push(r);
};

/**
 *	Route a path
 *	@param {Object} res
 *	@param {Object} req
 */
Pathr.prototype.route = function(req, res) {
	var method = req.method,
		url = req.url,
		obj,
		match;
	
	url = request.prepareUrl(url);

	if (this.parseFunc) url = this.parse(url);
	
	for (var i = 0, len = this.routes[method].length; i<len; i++) {
		obj = this.routes[method][i];
		match =	obj.match(url);
		if (match) break;
	};
	
	if (!match) {
		utils.noRoute(req, res);
		return false;
	};

	req.params = obj.params;
	res.locals = {};
	request.parseQuery(req);

	var self = this;

	obj.callback(req, res, function(){
		if (typeof obj.options == 'function') {
			obj.options(req, res);
		} else {
			response.call(self, req, res, obj.options);
		};
	});

	return true;
};

/**
 *	Process a path before matching it
 *	@param {Function} parse
 */
Pathr.prototype.parseUrl = function(parse) {
	this.parseFunc = parse;
};

module.exports = Pathr;
