'use strict';

/**
 *	Normalize the given path string,
 * 	returning a regular expression.
 *
 * 	An empty array should be passed,
 * 	which will contain the placeholder
 * 	key names. For example "/user/:id" will
 * 	then contain ["id"].
 *
 * 	@param  {String|RegExp|Array} path
 * 	@param  {Array} keys
 * 	@param  {Boolean} sensitive
 * 	@param  {Boolean} strict
 * 	@return {RegExp}
 */
exports.pathtoRegexp = function(path, keys, sensitive, strict) {
	if (path instanceof RegExp) return path;
	if (path instanceof Array) path = '(' + path.join('|') + ')';
	path = path
		.concat(strict ? '' : '/?')
		.replace(/\/\(/g, '(?:/')
		.replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional){
			keys.push({ name: key, optional: !! optional });
			slash = slash || '';
			return ''
			+ (optional ? '' : slash)
			+ '(?:'
			+ (optional ? slash : '')
			+ (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')'
			+ (optional || '');
		})
		.replace(/([\/.])/g, '\\$1')
		.replace(/\*/g, '(.*)');
	return new RegExp('^' + path + '$', sensitive ? '' : 'i');
}

/**
 *	Tried to match the url but didn't find a match
 */
exports.noRoute = function(req, res) {
	var error = 'cannot '+req.method+' '+req.url;
	res.writeHead(404, {
		'Content-Length': error.length,
		'Content-Type':'text/plain'
	});
	res.end(error);
};
